;Raw mat.;Manufacturing;Packaging;Autoclave;Container cleaning;Transport;Incineration;Recycling;Avoided mat. prod.;Avoided energy prod.;;;
H2R;0.154241653;0.047098413;0.029695566;0.313619415;0;0.000227049;0.093991167;0;-0.098885177;-0.103096791;;;
H2S;0.154241653;0.047098413;0.029695566;0.313619415;0;0.000227049;0.204328624;0;-0.006893154;-0.22412346;;;
ASC;0.093526723;0.016045341;0.001911542;0.418159221;0.081383517;0.001019279;0.00037872;0.003019104;-0.090140256;-0.000628581;;;
ASW;0.093526723;0.016045341;0.032721495;0.418159221;0.010868049;0.001019279;0.035202007;0.003019104;-0.090140256;-0.043319763;;;
H4R;0.438828364;0.133998301;0.089558056;0.418159221;0;0.00068475;0.274481632;0;-0.282821535;-0.293317632;;;
H4S;0.438828364;0.133998301;0.089558056;0.418159221;0;0.00321999;0.58510497;0;-0.01961151;-0.637647026;;;
ALC;0.156522745;0.027201129;0.003199084;0.627238831;0.162767034;0.001705826;0.00075744;0.005052657;-0.150855282;-0.001257162;;;
ALW;0.156522745;0.027201129;0.034009036;0.627238831;0.010868049;0.001705826;0.035580727;0.005052657;-0.150855282;-0.043319763;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
H2;1;1;1;1;;1;0.46;;;0.459999997;;;
AS;1;1;0.058418541;1;;1;0.010758477;;;0.014510259;;;
H4;1;1;1;1;;0.21265594;0.469115195;;;0.46;;;
AL;1;1;0.094065707;1;;1;0.021287929;;;0.029020519;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # x_axis = []
;;;;;;;;;;;;;    # GWP_value = []
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # # Obtaining the contribution of each scenario for the life stages 
;;;;;;;;;;;;;    # for col in df_GWP.columns:
;;;;;;;;;;;;;    #     for i, row in df_GWP.iterrows():
;;;;;;;;;;;;;    #         # Empty list to store the process name and the value
;;;;;;;;;;;;;    #         lst_x = []
;;;;;;;;;;;;;    #         lst_GWP = []
;;;;;;;;;;;;;    #         # initial value for the total value of the gwp total
;;;;;;;;;;;;;    #         gwp_tot = 0
;;;;;;;;;;;;;    #         # Iterating over each nested list
;;;;;;;;;;;;;    #         for lst in row[col]:
;;;;;;;;;;;;;    #             x = lst[0]
;;;;;;;;;;;;;    #             gwp = lst[1]
;;;;;;;;;;;;;
;;;;;;;;;;;;;    #             # Updating the name of process
;;;;;;;;;;;;;    #             x, gwp = flow_name_update(x, gwp, db_type, database_name)
;;;;;;;;;;;;;    #             if 'Avoided mat. prod.' in x and gwp > 0:
;;;;;;;;;;;;;    #                 gwp = -gwp
;;;;;;;;;;;;;
;;;;;;;;;;;;;    #             lst_x.append(x)
;;;;;;;;;;;;;    #             lst_GWP.append(gwp)
;;;;;;;;;;;;;    #             gwp_tot += gwp
;;;;;;;;;;;;;            
;;;;;;;;;;;;;    #         # Setting the updated list back into a new nested list
;;;;;;;;;;;;;    #         lst_GWP.append(gwp_tot)
;;;;;;;;;;;;;    #         lst_x.append('Total')
;;;;;;;;;;;;;    #         x_axis.append(lst_x)
;;;;;;;;;;;;;    #         GWP_value.append(lst_GWP)
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # # Create an empty dictionary to collect the data
;;;;;;;;;;;;;    # key_dic = {}
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # # Collect the data into the dictionary
;;;;;;;;;;;;;    # for i, p in enumerate(GWP_value):
;;;;;;;;;;;;;    #     for a, b in enumerate(p):
;;;;;;;;;;;;;    #         key = (flow_legend[i], x_axis[i][a])
;;;;;;;;;;;;;    #         if key in key_dic:
;;;;;;;;;;;;;    #             key_dic[key] += b
;;;;;;;;;;;;;    #         else:
;;;;;;;;;;;;;    #             key_dic[key] = b
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # # Convert the dictionary into a DataFrame
;;;;;;;;;;;;;    # df = pd.DataFrame(list(key_dic.items()), columns=['Category', 'Value'])
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # # Separate 'Total' values from the rest
;;;;;;;;;;;;;    # totals_df = df[df['Category'].apply(lambda x: x[1]) == 'Total']
;;;;;;;;;;;;;    # df = df[df['Category'].apply(lambda x: x[1]) != 'Total']
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # # Pivot the DataFrame to have a stacked format
;;;;;;;;;;;;;    # df_stacked = df.pivot_table(index=[df['Category'].apply(lambda x: x[0])], columns=[df['Category'].apply(lambda x: x[1])], values='Value', aggfunc='sum').fillna(0)
;;;;;;;;;;;;;
;;;;;;;;;;;;;    # # Create a DataFrame to store results
;;;;;;;;;;;;;    # df_stack_updated = pd.DataFrame(0, index=flow_legend, columns=columns[:-1], dtype=object)  # dtype=object to handle lists
;;;;;;;;;;;;;    # for col in df_stack_updated.columns:
;;;;;;;;;;;;;    #     for inx, row in df_stack_updated.iterrows():
;;;;;;;;;;;;;    #         row[col] = df_stacked[col][inx]
